{"version":3,"sources":["RESTclient.tsx","entities/Todo.tsx","components/TodoForm.tsx","components/TodoTable.tsx","App.tsx","index.tsx"],"names":["Restclient","baseURL","port","this","axios","get","newTodo","post","todo","put","id","todoId","delete","Todo","title","note","duedate","TodoForm","props","useForm","mode","defaultValues","payload","register","errors","handleSubmit","Form","noValidate","onSubmit","data","undefined","submitFunction","closeModal","Group","controlId","Label","Control","type","placeholder","ref","required","minLength","name","className","Date","toLocaleDateString","maxLength","as","rows","Button","variant","actionType","TodoTable","useState","selectedTodo","setSelectedTodo","showNoteModal","setShowNoteModal","handleNoteModalClose","showUpdateModal","setShowUpdateModal","handleUpdateModalClose","Table","responsive","hover","size","map","align","Dropdown","Toggle","split","Menu","Item","onClick","handleNoteModalShow","handleUpdateModalShow","deleteTodo","Modal","show","onHide","Header","closeButton","Title","Body","Footer","updateTodo","App","todos","setTodos","setShow","handleClose","todoClient","process","getTodosAndUpdateState","getAllTodos","then","response","sort","a","b","catch","error","console","log","useEffect","createTodo","require","config","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f90de7e.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\nimport Todo from './entities/Todo'\r\n\r\nclass Restclient {\r\n    private readonly baseURL\r\n    private readonly port\r\n\r\n    constructor(baseURL: string, port: string | undefined) {\r\n        this.baseURL = baseURL\r\n        this.port = port\r\n    }\r\n\r\n    getAllTodos(): Promise<any> {\r\n        return axios.get(`${this.baseURL}:${this.port}/todos`)\r\n    }\r\n\r\n    createTodo(newTodo: Todo): Promise<AxiosResponse<any>> {\r\n        return axios.post(`${this.baseURL}:${this.port}/todos`, newTodo)\r\n    }\r\n\r\n    updateTodo(todo: Todo): Promise<AxiosResponse<any>> {\r\n        return axios.put(`${this.baseURL}:${this.port}/todos/${todo.id}`, todo)\r\n    }\r\n\r\n    deleteTodo(todoId: number): Promise<AxiosResponse<any>> {\r\n        return axios.delete(`${this.baseURL}:${this.port}/todos/${todoId}`)\r\n    }\r\n}\r\n\r\nexport default Restclient\r\n","/**\r\n * Todo entity\r\n */\r\nexport default class Todo {\r\n    id = -1\r\n    title = ''\r\n    note = ''\r\n    duedate = ''\r\n}\r\n","import Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport { useForm } from 'react-hook-form'\r\nimport Todo from '../entities/Todo'\r\n\r\n/**\r\n * Interface defining the props passed to the TodoForm\r\n */\r\ninterface TodoFormProps {\r\n    submitFunction: (todo: Todo) => void\r\n    payload?: Todo\r\n    actionType: string\r\n    closeModal?: () => void\r\n}\r\n\r\n/**\r\n *\r\n * @param props\r\n */\r\nfunction TodoForm(props: TodoFormProps): JSX.Element {\r\n    // registers and validates the requirements of the textfields\r\n    const { register, errors, handleSubmit } = useForm({\r\n        mode: 'onBlur',\r\n        defaultValues: { ...props.payload },\r\n    })\r\n\r\n    // submits form and resets all field\r\n    const onSubmit = (data: Todo) => {\r\n        const todo = new Todo()\r\n        todo.title = data.title\r\n        todo.duedate = data.duedate\r\n        todo.note = data.note\r\n        todo.id = props.payload !== undefined ? props.payload.id : -1\r\n        props.submitFunction(todo)\r\n        if (props.closeModal !== undefined) props.closeModal()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form noValidate onSubmit={handleSubmit(onSubmit)}>\r\n                <Form.Group controlId=\"formTitle\">\r\n                    <Form.Label>TODO</Form.Label>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        placeholder=\"Enter TODO-title\"\r\n                        ref={register({ required: true, minLength: 1 })}\r\n                        name=\"title\"\r\n                    />\r\n                    {errors.title && <p className=\"fieldError\">Please proivde a title.</p>}\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formDueDate\">\r\n                    <Form.Label>Due Date</Form.Label>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        placeholder={new Date().toLocaleDateString()}\r\n                        ref={register({ required: true, minLength: 8, maxLength: 10 })}\r\n                        name=\"duedate\"\r\n                    />\r\n                    {errors.duedate && <p className=\"fieldError\">Please proivde a Due Date with 6-8 characters.</p>}\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formNote\">\r\n                    <Form.Label>Note</Form.Label>\r\n                    <Form.Control as=\"textarea\" name=\"note\" ref={register()} rows={4} />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    {props.actionType}\r\n                </Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import Todo from '../entities/Todo'\r\nimport Table from 'react-bootstrap/Table'\r\nimport { Button, Dropdown, Modal } from 'react-bootstrap'\r\nimport { useState } from 'react'\r\nimport TodoForm from './TodoForm'\r\n\r\n/**\r\n * Creates a Table out of the given data with the edit, delete and view notes actions (calling functions passed via props)\r\n * @param props\r\n */\r\nfunction TodoTable(props: {\r\n    data: Todo[]\r\n    updateTodo: (todo: Todo) => void\r\n    deleteTodo: (id: number) => void\r\n}): JSX.Element {\r\n    const [selectedTodo, setSelectedTodo] = useState(new Todo())\r\n\r\n    // State to save the status of the Modal for the view note dialog (true visible, false invisible)\r\n    const [showNoteModal, setShowNoteModal] = useState(false)\r\n    const handleNoteModalClose = () => setShowNoteModal(false)\r\n    const handleNoteModalShow = (todo: Todo) => {\r\n        setSelectedTodo(todo)\r\n        setShowNoteModal(true)\r\n    }\r\n\r\n    // State to save the status of Modal for the update dialog (true visible, false invisible)\r\n    const [showUpdateModal, setShowUpdateModal] = useState(false)\r\n    const handleUpdateModalClose = () => setShowUpdateModal(false)\r\n    const handleUpdateModalShow = (todo: Todo) => {\r\n        setSelectedTodo(todo)\r\n        setShowUpdateModal(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Table responsive hover size=\"sm\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>\r\n                            <input type=\"checkbox\" />\r\n                        </th>\r\n                        <th>ID</th>\r\n                        <th>TODO</th>\r\n                        <th>Due Date</th>\r\n                        <th className=\"text-right\">Action</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/*Create a line for every entry in the dabase*/}\r\n                    {props.data.map((todo) => (\r\n                        <tr key={todo.id}>\r\n                            <td>\r\n                                <input type=\"checkbox\" />\r\n                            </td>\r\n                            <td>{todo.id}</td>\r\n                            <td>{todo.title}</td>\r\n                            <td>{todo.duedate}</td>\r\n                            <td align=\"right\">\r\n                                {/*Actions*/}\r\n                                <Dropdown>\r\n                                    <Dropdown.Toggle split={false} variant=\"none\" className=\"actionDropDownToggle\">\r\n                                        ...\r\n                                    </Dropdown.Toggle>\r\n\r\n                                    <Dropdown.Menu>\r\n                                        <Dropdown.Item onClick={() => handleNoteModalShow(todo)}>\r\n                                            View Note\r\n                                        </Dropdown.Item>\r\n                                        <Dropdown.Item onClick={() => handleUpdateModalShow(todo)}>Edit</Dropdown.Item>\r\n                                        <Dropdown.Item onClick={() => props.deleteTodo(todo.id)} id=\"DropDownDelete\">\r\n                                            Delete\r\n                                        </Dropdown.Item>\r\n                                    </Dropdown.Menu>\r\n                                </Dropdown>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n            {/*Modal to view notes*/}\r\n            <Modal show={showNoteModal} onHide={handleNoteModalClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{selectedTodo.title}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>{selectedTodo.note}</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={handleNoteModalClose} className=\"modalCloseBtn\">\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            {/*Modal to edit todos*/}\r\n            <Modal show={showUpdateModal} onHide={handleUpdateModalClose}>\r\n                <Modal.Header closeButton>\r\n                    {/*shouldn't it better be \"Update TODO\"*/}\r\n                    <Modal.Title>{selectedTodo.title}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <TodoForm\r\n                        submitFunction={props.updateTodo}\r\n                        actionType=\"Update\"\r\n                        payload={selectedTodo}\r\n                        closeModal={handleUpdateModalClose}\r\n                    />\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoTable\r\n","import { useEffect, useState } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport Restclient from './RESTclient'\r\nimport TodoTable from './components/TodoTable'\r\nimport TodoForm from './components/TodoForm'\r\nimport Todo from './entities/Todo'\r\nimport { Button, Modal } from 'react-bootstrap'\r\nimport './App.scss'\r\n\r\nfunction App(): JSX.Element {\r\n    const [todos, setTodos] = useState<Todo[]>([])\r\n    const [show, setShow] = useState(false)\r\n\r\n    const handleClose = () => setShow(false)\r\n    const handleShow = () => setShow(true)\r\n\r\n    const todoClient = new Restclient(`http://${process.env.REACT_APP_REST_HOST}`, process.env.REACT_APP_REST_PORT)\r\n\r\n    useEffect(() => {\r\n        getTodosAndUpdateState()\r\n    }, [])\r\n\r\n    // Get the data from the REST interfacem sorty by id and update the local state\r\n    function getTodosAndUpdateState() {\r\n        todoClient\r\n            .getAllTodos()\r\n            .then((response) => {\r\n                response.data.sort((a: Todo, b: Todo) => (a.id > b.id ? 1 : -1))\r\n                setTodos([...response.data])\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    function createNewTodo(newTodo: Todo): void {\r\n        todoClient\r\n            .createTodo(newTodo)\r\n            .then(getTodosAndUpdateState)\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    function updateTodo(todo: Todo): void {\r\n        todoClient\r\n            .updateTodo(todo)\r\n            .then(getTodosAndUpdateState)\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    function deleteTodo(todoId: number): void {\r\n        todoClient\r\n            .deleteTodo(todoId)\r\n            .then(getTodosAndUpdateState)\r\n            .catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\"></header>\r\n            <h1>TODO List</h1>\r\n            <Button onClick={handleShow} className=\"createButton\" variant=\"success\">\r\n                Create Todo\r\n            </Button>\r\n            <TodoTable data={todos} updateTodo={updateTodo} deleteTodo={deleteTodo} />\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Create TODO</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <TodoForm actionType=\"Create\" submitFunction={createNewTodo} closeModal={handleClose} />\r\n                </Modal.Body>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\n// loads the config from the .env file\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nrequire('dotenv').config({ path: '../../.env' })\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n)\r\n"],"sourceRoot":""}